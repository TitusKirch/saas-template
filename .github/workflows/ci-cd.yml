name: CI/CD

on:
  push:
    branches: ["main", "stage", "dev"]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: ["*"]
  release:
    types: [prereleased, released]

# remove default permissions of GITHUB_TOKEN for security
# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: ${{ github.event_name != 'push' }}

env:
  DOCKER_CONTAINER_REGISTRY: ghcr.io

jobs:
  files-changed:
    name: Detect which files have changed
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      app_blog: ${{ steps.changes.outputs.app_blog }}
      app_web: ${{ steps.changes.outputs.app_web }}
      service_api: ${{ steps.changes.outputs.service_api }}
      turbo_filter_args: ${{ steps.turbo_filter.outputs.args }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check for changed files
        uses: dorny/paths-filter@v3
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-filters.yml

      - name: Generate filter arguments for turbo commands
        id: turbo_filter
        run: |
          args=""
          if [ "${{ steps.changes.outputs.app_blog }}" == "true" ]; then
            args="$args --filter=@tituskirch/blog"
          fi
          if [ "${{ steps.changes.outputs.app_web }}" == "true" ]; then
            args="$args --filter=@tituskirch/web"
          fi
          if [ "${{ steps.changes.outputs.service_api }}" == "true" ]; then
            args="$args --filter=@tituskirch/api"
          fi

          # trim leading space
          args="${args# }"

          echo "args=$args" >> $GITHUB_OUTPUT

  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

  lint-and-format:
    name: Lint and format
    needs:
      - files-changed
      - install-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint ${{ needs.files-changed.outputs.turbo_filter_args }}

      - name: Format
        run: pnpm format

  build:
    name: Build
    needs:
      - files-changed
      - lint-and-format
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build ${{ needs.files-changed.outputs.turbo_filter_args }}

      - name: Cache build
        uses: actions/upload-artifact@v4
        with:
          retention-days: 3
          name: build
          path: |
            apps/*/.nuxt
            packages/*/.nuxt

  test:
    name: Test
    needs:
      - files-changed
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Restore build cache
        uses: actions/download-artifact@v4
        with:
          name: build
          path: |
            apps
            packages
          
      # - name: Test
      #   run: pnpm test ${{ needs.files-changed.outputs.turbo_filter_args }}

  test-e2e:
    name: Test E2E
    needs:
      - files-changed
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Restore build cache
        uses: actions/download-artifact@v4
        with:
          name: build
          path: |
            apps
            packages
          
      # - name: Test E2E
      #   run: pnpm test:e2e ${{ needs.files-changed.outputs.turbo_filter_args }}

  docker-app-blog:
    name: Docker image for app "blog"
    if: ${{ needs.files-changed.outputs.app_blog == 'true' }}
    needs:
      - files-changed
      - test
      - test-e2e
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Restore build cache
        uses: actions/download-artifact@v4
        with:
          name: build
          path: |
            apps
            packages
      
      - name: Create docker image
        uses: ./.github/actions/docker-app
        with:
          app_name: blog
          push_image: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/dev') || github.event_name == 'release' }}
          docker_registry: ${{ env.DOCKER_CONTAINER_REGISTRY }}
          docker_registry_username: ${{ github.actor }}
          docker_registry_password: ${{ secrets.GITHUB_TOKEN }}
          docker_image_tag: ${{ github.event_name == 'push' && github.ref == 'refs/heads/dev' && 'dev' || github.event_name == 'release' && github.event.release.tag_name || '' }}
          docker_image_tag_latest: ${{ github.event_name == 'release' && !github.event.prerelease }}

  docker-app-web:
    name: Docker image for app "web"
    if: ${{ needs.files-changed.outputs.app_web == 'true' }}
    needs:
      - files-changed
      - test
      - test-e2e
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Restore build cache
        uses: actions/download-artifact@v4
        with:
          name: build
          path: |
            apps
            packages
      
      - name: Create docker image
        uses: ./.github/actions/docker-app
        with:
          app_name: web
          push_image: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/dev') || github.event_name == 'release' }}
          docker_registry: ${{ env.DOCKER_CONTAINER_REGISTRY }}
          docker_registry_username: ${{ github.actor }}
          docker_registry_password: ${{ secrets.GITHUB_TOKEN }}
          docker_image_tag: ${{ github.event_name == 'push' && github.ref == 'refs/heads/dev' && 'dev' || github.event_name == 'release' && github.event.release.tag_name || '' }}
          docker_image_tag_latest: ${{ github.event_name == 'release' && !github.event.prerelease }}


  # todo: 2
  # - push in dev => update dev container (only needed)
  # push: ${{ github.event_name != 'pull_request' }}
  # - extra ci for (pre) release => on (pre) release in main/stage => update stage/prod container
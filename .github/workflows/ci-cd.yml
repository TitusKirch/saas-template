name: CI/CD

on:
  push:
    branches: ["main", "stage", "dev"]
    paths-ignore:
      - "docs/**"
      - "*.md"
  pull_request:
    branches: ["*"]
    paths-ignore:
      - "docs/**"
      - "*.md"

# remove default permissions of GITHUB_TOKEN for security
# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: ${{ github.event_name != 'push' }}

env:
  DOCKER_CONTAINER_REGISTRY: ghcr.io


jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

  lint-and-format:
    # autofix workflow will be triggered instead for PRs
    if: github.event_name == 'push'
    needs:
      - install-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Format
        run: pnpm format

  build:
    needs:
      - lint-and-format
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Cache build
        uses: actions/upload-artifact@v4
        with:
          retention-days: 3
          name: build
          path: |
            apps/*/.nuxt
            packages/*/.nuxt

  test:
    needs:
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Restore build cache
        uses: actions/download-artifact@v4
        with:
          name: build
          path: |
            apps
            packages
          
      # - name: Test
      #   run: pnpm test

  test-e2e:
    needs:
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Enable corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Restore build cache
        uses: actions/download-artifact@v4
        with:
          name: build
          path: |
            apps
            packages
          
      # - name: Test E2E
      #   run: pnpm test:e2e
  
  docker-apps-build:
    # needs:
    #   - test
    #   - test-e2e
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        apps: [blog, web]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          base: ${{ github.ref }}
          filters: |
            apps:
              - 'apps/**'
  
      - name: Enable corepack
        if: steps.changes.outputs.apps == 'true'
        run: corepack enable

      - name: Setup node
        if: steps.changes.outputs.apps == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        if: steps.changes.outputs.apps == 'true'
        run: pnpm install

      - name: Restore build cache
        if: steps.changes.outputs.apps == 'true'
        uses: actions/download-artifact@v4
        with:
          name: build
          path: |
            apps
            packages

      - name: Setup Docker Buildx
        if: steps.changes.outputs.apps == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: steps.changes.outputs.apps == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/Dockerfile
          # push: true
          # tags: ${{ env.DOCKER_CONTAINER_REGISTRY }}/TitusKirch/${{ matrix.apps }}:latest
          build-args: |
            PACKAGE_NAME=@TitusKirch/${{ matrix.apps }}
            PACKAGE_PATH=apps/${{ matrix.apps }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # todo:
  # - push in dev => update dev container (only needed)
  # - extra ci for (pre) release => on (pre) release in main/stage => update stage/prod container